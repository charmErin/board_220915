package com.its.board.service;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.its.board.dto.BoardDTO;
import com.its.board.dto.PageDTO;
import com.its.board.repository.BoardRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class BoardService {
	private final BoardRepository boardRepository;

	public int save(BoardDTO boardDTO) throws IllegalStateException, IOException {
		MultipartFile boardFile = boardDTO.getBoardFile();

		if (!boardFile.isEmpty()) {
			String boardFileName = boardFile.getOriginalFilename();
			boardFileName = System.currentTimeMillis() + "_" + boardFileName;
			String savePath = "D:\\eclipse_file\\" + boardFileName;
			boardFile.transferTo(new File(savePath));
			boardDTO.setBoardFileName(boardFileName);
		}
		return boardRepository.save(boardDTO);
	}

	public List<BoardDTO> findAll(int categoryId) {
		return boardRepository.findAll(categoryId);
	}

	public BoardDTO findById(Long id) {
		return boardRepository.findById(id);
	}
	
	public BoardDTO detail(Long id) {
		return boardRepository.detail(id);
	}

	public void update(BoardDTO boardDTO) throws IllegalStateException, IOException {
		MultipartFile boardFile = boardDTO.getBoardFile();

		if (!boardFile.isEmpty()) {
			String boardFileName = boardFile.getOriginalFilename();
			boardFileName = System.currentTimeMillis() + "_" + boardFileName;
			String savePath = "D:\\eclipse_img\\" + boardFileName;
			boardFile.transferTo(new File(savePath));
			boardDTO.setBoardFileName(boardFileName);
		}
		boardRepository.update(boardDTO);
	}

	public void delete(Long id) {
		boardRepository.delete(id);
	}

	public List<BoardDTO> search(Map<String, String> searchMap) {
		return boardRepository.search(searchMap);
	}
	
	
	private static final int PAGE_LIMIT = 3;
	private static final int BLOCK_LIMIT = 5;

	public List<BoardDTO> pagingList(int page, int categoryId) {
		int startPage = (page-1) * PAGE_LIMIT;
		Map<String, Integer> boardParam = new HashMap<String, Integer>();
		boardParam.put("start", startPage);
		boardParam.put("count", PAGE_LIMIT);
		List<BoardDTO> boardList = boardRepository.boardList(boardParam);
		return boardList;
	}

	public PageDTO paging(int page, int categoryId) {
		
		return null;
	}

	
}

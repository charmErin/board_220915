package com.its.board.controller;

import java.io.IOException;
import java.util.HashMap;

import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.its.board.dto.BoardDTO;
import com.its.board.service.BoardService;

import lombok.RequiredArgsConstructor;

@Controller
@RequiredArgsConstructor
@RequestMapping("/board")
public class BoardController {
	private final BoardService boardService;
	
	@GetMapping("/save-form")
	public String saveForm() {
		return "board/save";
	}
	
	@PostMapping("/save")
	public String save(@ModelAttribute BoardDTO boardDTO) throws IllegalStateException, IOException {
		int result = boardService.save(boardDTO);
		if (result > 0) {
			return "redirect:/board/findAll";
		} else {
			System.out.println("글 저장실패");
			return "index";
		}
	}
	
	@GetMapping("/findAll")
	public String findAll(Model model) {
		model.addAttribute("boardList", boardService.findAll());
		return "board/list";
	}
	
	@GetMapping("/detail")
	public String findById(@RequestParam Long id, Model model) {
		BoardDTO boardDTO = boardService.detail(id);
		model.addAttribute("board", boardDTO);
		return "board/detail";
	}
	
	@GetMapping("/update-form")
	public String updateForm(@RequestParam Long id, Model model) {
		BoardDTO boardDTO = boardService.findById(id);
		model.addAttribute("board", boardDTO);
		return "board/update";
	}
	
	@PostMapping("/update")
	public String update(@ModelAttribute BoardDTO boardDTO) throws IllegalStateException, IOException {
		boardService.update(boardDTO);
		return "redirect:/board/findAll";
	}
	
	@GetMapping("/delete")
	public String delete(@RequestParam Long id) {
		boardService.delete(id);
		return "redirect:/board/findAll";
	}
	
	@GetMapping("/search")
	public String search(@RequestParam String searchType, @RequestParam String q,
						Model model) {
		Map<String, String> searchMap = new HashMap<String, String>();
		searchMap.put("type", searchType);
		searchMap.put("q", q);
		List<BoardDTO> boardDTOList = boardService.search(searchMap);
		model.addAttribute("boardList", boardDTOList);
		return "board/list";
	}
	
	
	
}
